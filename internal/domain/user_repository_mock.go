// Code generated by mockery v2.20.2. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// UserRepositoryMock is an autogenerated mock type for the UserRepository type
type UserRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepositoryMock) Create(user *User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *UserRepositoryMock) FindAll() ([]User, error) {
	ret := _m.Called()

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTgAccount provides a mock function with given fields: tgAccount
func (_m *UserRepositoryMock) FindByTgAccount(tgAccount string) (*User, error) {
	ret := _m.Called(tgAccount)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(tgAccount)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(tgAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tgAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepositoryMock) Save(user *User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepositoryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryMock creates a new instance of UserRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryMock(t mockConstructorTestingTNewUserRepositoryMock) *UserRepositoryMock {
	mock := &UserRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
