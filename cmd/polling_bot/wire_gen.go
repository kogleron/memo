// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"memo/internal/apps"
	"memo/internal/bootstrap"
	"memo/internal/command"
	"memo/internal/configs"
	"memo/internal/memo"
	"memo/internal/telegram"
	"memo/internal/user"
)

// Injectors from wire.go:

func initPollingBot() (*apps.PollingBot, error) {
	telegramConfig := configs.GetTelegramConfig()
	botAPI, err := bootstrap.NewTgBot(telegramConfig)
	if err != nil {
		return nil, err
	}
	parser := command.NewParser()
	dbConfig := configs.GetDBConfig()
	db, err := bootstrap.NewGORMDb(dbConfig)
	if err != nil {
		return nil, err
	}
	gormRepository, err := memo.NewGORMRepository(db)
	if err != nil {
		return nil, err
	}
	userGORMRepository := user.NewGORMRepository(db)
	addExecutor := command.NewAddExecutor(gormRepository, botAPI, userGORMRepository)
	appConfig := configs.GetAppConfig()
	randExecutor := bootstrap.NewRandExecutor(appConfig, gormRepository, botAPI, userGORMRepository)
	startExecutor := command.NewStartExecutor(userGORMRepository, botAPI)
	replier := telegram.NewReplier(botAPI)
	searchExecutor := bootstrap.NewSearchExecutor(gormRepository, userGORMRepository, appConfig, replier)
	defaultCommandExecutor := bootstrap.NewDefaultCommandExecutor(addExecutor)
	deleteExecutor := command.NewDeleteExecutor(gormRepository, userGORMRepository, replier)
	executors := bootstrap.NewCommandExecutors(addExecutor, randExecutor, startExecutor, searchExecutor, defaultCommandExecutor, deleteExecutor, replier)
	pollingBot := bootstrap.NewPollingBot(botAPI, telegramConfig, parser, executors)
	return pollingBot, nil
}
